double <- function(t) {
result <- (t*2)
}
t <- 247
double <- function(t) {
t*2
}
double
t <- 247
double <- function(t) {
t*2
}
print(double)
t <- 247
double <- function(t) {
t*2
}
print(double)
?cube
double <- function(a) {
a <- 247
a*2
}
double <- function(a) {
a <- 247
a*2
}
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch * 1/2.54
return(convert_cm)
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch * 1/2.54
return(convert_cm)
}
print(inches_to_cm)
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, myname is", "Hey, I am", "Hello, my name is Nyamsuren, and I am 26 years old.")
print(casual_intro)
?sub
# into all capital letters.
loud_intro <- toupper(my_intro)
print(loud_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count("my_intro", "e")
print(occurrences)
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch * 1/2.54
return(convert_cm)
}
print(inches_to_cm)
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
print(quiet_intro)
?str
?str_to_title
occurrences <- str_count("my_intro", "e")
print(occurrences)
str_count
?str_count
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
library("stringr")
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
double <- function(a) {
a <- 247
a*2
}
double(4)
double <- function(a) {
a*2
}
double(4)
double(48)
print(occurrences)
library("stringr")
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro)
print(occurrences)
print(my_intro)
print(twenty_seven)
convert_cm <- convert_inch * 1/2.54
convert_inch(10)
has_more_zs("z", "zzzz")
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
if (string1z > string2z){
return(string1)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "zzzz")
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <-
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "zzzz")
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z & Z")
string2z <- str_count(string2, "z & Z")
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
str_to_lower(string1, string2)
str_to_upper(string1, string2)
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
has_more_zs <- str_to_lower(string1, string2)
has_more_zs <- str_to_upper(string1, string2)
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
has_more_zs <- str_to_lower(string1z, string2z)
has_more_zs <- str_to_upper(string1z, string2z)
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
string1z <- str_to_lower(string1, string2)
string2z <- str_to_upper(string1, string2)
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
print(more_zs)
print(more_zs)
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <-
print(twenty_seven)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch * 1/2.54
return(convert_cm)
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 68.9
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <-
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
string1z <- str_count(string1, "z")
string2z <- str_count(string2, "z")
string1z <- str_to_lower(string1, string2)
string2z <- str_to_upper(string1, string2)
if(string1z > string2z) {
return(string1)
} else if(string1z < string2z) {
return(string2)
} else if (string1z < 0 | string2z < 0){
return("Neither string contains the letter z.")
} else if (string1z == string2z){
return("The strings have the same number of Zs.")
}
}
has_more_zs("z", "ZZZ")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("z", "ZZZ")
print(more_zs)
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("z", "ZZZ")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(c) {
remove(0:9)
}
remove_digits(0:255, 700)
remove_digits <- function(c) {
remove(0:9)
}
remove_digits(0:255)
remove_digits <- function(c) {
remove(0:9)
}
remove_digits(0:255)
library("stringr")
library("stringr")
?remove
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(c) {
remove("0:9")
}
remove_digits("0:255")
remove_digits <- function(string3) {
remove("0:9")
}
remove_digits("0:255")
remove_digits <- function(string3) {
rm("0:9")
}
remove_digits("0:255")
remove_digits <- function(string3) {
string3 <- rm("0:9")
}
remove_digits("0:255")
remove_digits <- function(string3) {
string3 <- rm(0:9)
}
remove_digits(0:255)
remove_digits <- function(string3) {
string3_r <- rm(string1, pos = 0:9)
}
remove_digits(0:255)
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string3) {
string3_r <- rm(string1, 0:9)
}
remove_digits(0:255)
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- summary_info
print(summary_info)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
- `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- summary_info
print(summary_info)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector
summarize_vector <- (1:100)
print(summary_1_to_100)
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- summary_info
print(summary_info)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
print(summary_1_to_100)
- `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- summary_info
print(summary_info)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector
summarize_vector <- (c(1:100))
print(summary_1_to_100)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector
print(summary_1_to_100)
print(summary_1_to_100)
remove_digits(seq(1:100))
remove_digits(c(1:100))
remove_digits(c(1:100))
remove_digits(c(1:100))
remove_digits <- function(string3) {
string3[-0:9]
}
remove_digits(c(1:100))
remove_digits <- function(string3) {
string3[-(0:9)]
}
remove_digits(c(1:100))
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch / 2.54
}
inches_to_cm(80)
inches_to_cm(80)
inches_to_cm <- functoin(convert_inch) {
convert_cm <- convert_inch * 2.54
return(convert_cm)
}
inches_to_cm(80)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(convert_inch) {
convert_cm <- convert_inch * 2.54
return(convert_cm)
}
inches_to_cm(80)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(convert_inch) {
convert_cm <- convert_inch * 2.54
return(inches_to_cm)
}
inches_to_cm(80)
inches_to_cm(80)
inches_to_cm(80)
print(minutes_in_two_days)
print(minutes_in_two_days)
styler:::style_selection()
library(ggplot2)
library(dplyr)
library(knitr)
source("../source/analysis.R")
source("../source/viz.R")
mass_shootings <- read.csv("../data/shootings-2018.csv", stringsAsFactors = F)
kable(summary_by_state, caption = "Highest Kills and Injuries by States")
state_total_killed <- mass_shootings %>%
group_by(state) %>%
summarise(sum_killed = sum(num_killed))
ggplot(state_total_killed) +
geom_col(mapping = aes(x = state, y = sum_killed),
color = "blue") +
scale_x_discrete(labels = abbreviate) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Total Kills by the State, 2018")
leaflet(data = mass_shootings) %>%
addProviderTiles("Hydda.Base") %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
popup = paste("Date:", mass_shootings$date, "<br>",
"City:", mass_shootings$city, "<br>",
"Killed:", mass_shootings$num_killed),
color = "red",
weight = 1,
radius = ~num_killed * 20000,
fillOpacity = 0.5)
setwd("~/UW/Info201/Project/operation_awareness-")
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shiny")
library("shiny")
runApp('HateCrimeData')
setwd("~/UW/Info201/Project/operation_awareness-")
#
library(shiny)
runApp()
runApp()
# Data load
hate_crime_total_by_states <- read.csv("hate_crimes.csv", stringsAsFactors = FALSE)
setwd("~/UW/Info201/Project/operation_awareness-/main_app")
# Data load
hate_crime_total_by_states <- read.csv("hate_crimes.csv", stringsAsFactors = FALSE)
runApp()
setwd("~/UW/Info201/Project/operation_awareness-/data")
runApp('~/UW/Info201/Project/operation_awareness-/main_app')
runApp('~/UW/Info201/Project/operation_awareness-/main_app')
shiny::runApp()
