install.packages("stringr")
source('C:/Users/Nyamka/Desktop/info201/a2-basic-coding-NyamkaUW/assignment.R')
b <- 23
cat("There are", minutes_in_day, " minutes in a day.", "\n")
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_day <- 24
days_in_year <- 365
hours_in_year <- hours_in_day*days_in_year
cat("There are", hours_in_year, "hours in a year.", "\n")
## a2-foundational-skills
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
install.packages("stringr")
library("stringr")
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Nyamsuren Delger"
cat("I am", "Nyamsuren Delger.", "\n")
## ---------- end of the example ----------
## Create a numeric variable `my_age` that is equal to your age
my_age <- 26
cat("my age")
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 1440
cat("There are", minutes_in_day, " minutes in a day.", "\n")
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_day <- 24
days_in_year <- 365
hours_in_year <- hours_in_day*days_in_year
cat("There are", hours_in_year, "hours in a year.", "\n")
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes
## Compute the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
siy <- 60*60*24*365
cat(siy, "second per year.\n")
## How many seconds is a typical human lifetime?
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computer,
## we can safely say that your code fails :-)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
name <- "Nyamsuren Delger"
age <- "26"
return("Hello,", "my name is", name, "and I'm", age, "years old." )
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function.  Always print the result!
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable.  Check out base R functions 'sub' and 'gsub', and stringr functions 'str_replace' and 'str_replace_all'
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
## Write another function `third_power` that takes in a value and returns that value cubed
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Ocean's Eleven", "Focus", "Fast and Furious", "Transformers", "Avengers", "Zodiac")
print(movies)
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700,999)
print(numbers)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
## Create a vector `lower_numbers` that is the numbers 600:699
lower_numbers <- 600:699
print(lower_numbers)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
today <- as.Date("April 19, 2019")
cat(format("April 19,2019"))
## Create a variable `anniversary` that represents the 50th anniversary of the first Moon landings (July 20, 2019).
## Make sure to use the `as.Date` function again
anniversary <- as.Date("July 20, 2019")
cat(format("July 20, 2019"))
## Create a variable `days_to_anniversary` that is how many days until the anniversary (hint: subtract the dates!)
days_to_anniversary <- function(today, anniversary) {
days_to_anniversary <- anniversary - today
return(days_to_anniversary)
}
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
install.packages("stringr")
